apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Values.common.appName }}
    app.kubernetes.io/name: {{ .Values.common.appName }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    name: mysql-mgmt{{ .Values.instanceIdWithinNamespace }}
    release: {{ .Release.Name }}
  name: mysql-mgmt{{ .Values.instanceIdWithinNamespace }}
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      name: mysql-mgmt{{ .Values.instanceIdWithinNamespace }}
  template:
    metadata:
      annotations:
        hook.activate.cpd.ibm.com/command: '[]'
        hook.deactivate.cpd.ibm.com/command: '[]'         
        productName: IBM Planning Analytics Workspace
        productID: com.ibm.ba.paw.{{ .Release.Name }}
        productVersion: {{ .Release.Name }}
      labels:
        app: {{ .Values.common.appName }}
        app.kubernetes.io/name: {{ .Values.common.appName }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        name: mysql-mgmt{{ .Values.instanceIdWithinNamespace }}
        release: {{ .Release.Name }}
        version: "2.0.170-ubi8"
        pa-cacerts-version: {{ .Values.secrets.cacertVersion }}
        pa-tls-version: {{ .Values.secrets.tlsCertVersion }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - {{ .Values.arch }}
      volumes:     
        - name: mysql-mgmt
          emptyDir:
            medium: "{{ .Values.mysqlMgmt.emptyDirMedium }}"
            sizeLimit: "{{ .Values.mysqlMgmt.emptyDirSizeLimit }}"  
        - name: pa-cacerts
          emptyDir:
            medium: {{ .Values.secrets.tlsEmptyDirMedium }}
            sizeLimit: {{ .Values.secrets.tlsEmptyDirSizeLimit }}
        - name: pa-tls-cacerts
          secret:
            secretName: pa-tls-cacerts{{ .Values.instanceIdWithinNamespace }}
        - name: pa-tls-cert
          secret:
            secretName: {{ .Values.secrets.tlsCertSecretName }}{{ .Values.instanceIdWithinNamespace }}
      initContainers:
        - name: prepare-cacerts
          image: {{ .Values.docker_registry_prefix }}/k8s-config:1.0.106-ubi8
          command: ["/bin/bash"]
          args: ["-c", "/opt/harmony/start.sh capem"]
          env:
           - name: PA_KUBE_TM1_CA_CERTS
             value: /run/secrets/paw/tls-cacerts/cacerts.pem
           - name: PA_KUBE_TLS_CA_CERT
             value: /run/secrets/paw/tls-cert/{{ .Values.secrets.tlsCaCertName }}
          imagePullPolicy: IfNotPresent
          
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - name: pa-cacerts
            mountPath: /run/config
          - name: pa-tls-cacerts
            mountPath: /run/secrets/paw/tls-cacerts
          - name: pa-tls-cert
            mountPath: /run/secrets/paw/tls-cert
      containers:
        - name: pingservice
          image: {{ .Values.docker_registry_prefix }}/k8s-config:1.0.106-ubi8
          command: ["/bin/bash"]
          args: ["-c", "/opt/harmony/pingservice" ]
          ports:
            - containerPort: 31001
              protocol: TCP

          env:
            - name: PINGSERVICE_PORT
              value: "31001"
          securityContext:
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /ping
              port: 31001
            failureThreshold: {{ .Values.mysqlMgmt.livenessProbeFailureThreshold }}
            initialDelaySeconds: {{ .Values.mysqlMgmt.livenessProbeDelaySeconds }}
            periodSeconds: {{ .Values.mysqlMgmt.livenessProbePeriodSeconds }}
            timeoutSeconds: {{ .Values.mysqlMgmt.livenessProbeTimeoutSeconds }}
          readinessProbe:
            httpGet:
              path: /ping
              port: 31001
            failureThreshold: {{ .Values.mysqlMgmt.readinessProbeFailureThreshold }}
            initialDelaySeconds: {{ .Values.mysqlMgmt.readinessProbePeriodSeconds }}
            periodSeconds: {{ .Values.mysqlMgmt.readinessProbePeriodSeconds }}
            timeoutSeconds: {{ .Values.mysqlMgmt.readinessProbeTimeoutSeconds }}
        - name: mysql-mgmt-stunnel
          image: {{ .Values.docker_registry_prefix }}/mysql-cluster:2.0.170-ubi8
          command: [ "/tools/start-stunnel.sh" ]
          ports:
            - containerPort: 11186
              protocol: TCP
          env:
            - name: MYSQL_INSTANCE
              value: "{{ .Values.instanceIdWithinNamespace }}"
            - name: MYSQL_DOMAIN
              value: "{{ .Release.Namespace }}.{{ .Values.common.internalDomainName }}"
            - name: STUNNEL_CLIENT_MAPPINGS
              value: "mysql-data1,127.0.0.1:2201,mysql-data1{{ .Values.instanceIdWithinNamespace }}:12201 mysql-data2,127.0.0.1:2202,mysql-data2{{ .Values.instanceIdWithinNamespace }}:12202"
            - name: STUNNEL_SERVER_CA_FILE
              value: "/run/config/cacerts.pem"
            - name: STUNNEL_SERVER_CERT_FILE
              value: "/run/secrets/paw/tls-cert/tls.crt"
            - name: STUNNEL_SERVER_KEY_FILE
              value: "/run/secrets/paw/tls-cert/tls.key"
            - name: STUNNEL_SERVER_MAPPINGS
              value: "mysql-mgmt,0.0.0.0:11186,127.0.0.1:1186"
            - name: STUNNEL_CLIENT_VERIFY_CHAIN
              value: "false"
            - name: STUNNEL_CLIENT_VERIFY_HOST
              value: "false"
            - name: STUNNEL_CLIENT_VERIFY_PEER
              value: "false"
            - name: STUNNEL_SERVER_REQUIRE_TLS
              value: "false"
            - name: STUNNEL_SERVER_VERIFY_CHAIN
              value: "false"
            - name: STUNNEL_SERVER_VERIFY_HOST
              value: "false"
            - name: STUNNEL_SERVER_VERIFY_PEER
              value: "false"
          securityContext:
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: pa-cacerts
              mountPath: /run/config              
            - name: pa-tls-cert
              mountPath: /run/secrets/paw/tls-cert
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - date
            periodSeconds: {{ .Values.mysqlMgmt.livenessProbePeriodSeconds }}
            timeoutSeconds: {{ .Values.mysqlMgmt.livenessProbeTimeoutSeconds }}
          readinessProbe:
            exec:
              command:
                - date
            initialDelaySeconds: {{ .Values.mysqlMgmt.readinessProbeDelaySeconds }}
            periodSeconds: {{ .Values.mysqlMgmt.readinessProbePeriodSeconds }}
            timeoutSeconds: {{ .Values.mysqlMgmt.readinessProbeTimeoutSeconds }}
        - name: mysql-mgmt
          image: {{ .Values.docker_registry_prefix }}/mysql-cluster:2.0.170-ubi8
          args: ["ndb_mgmd", "--config-cache=FALSE"]                    
          ports:
            - containerPort: 1186
              protocol: TCP
          securityContext:
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
          env:
            - name: ENABLE_SSL
              value: "true"
            - name: SIDECAR_NAME
              value: "mysql-mgmt-stunnel"
            - name: SIDECAR_PORTS
              value: "11186,2201,2202"
            - name: SIDECAR_EXTRA_WAIT
              value: "5"
            - name: HOSTNAMES
              value: "mysql-data1{{ .Values.instanceIdWithinNamespace }}.{{ .Release.Namespace }}.{{ .Values.common.internalDomainName }} mysql-data2{{ .Values.instanceIdWithinNamespace }}.{{ .Release.Namespace }}.{{ .Values.common.internalDomainName }} mysql-mgmt{{ .Values.instanceIdWithinNamespace }}.{{ .Release.Namespace }}.{{ .Values.common.internalDomainName }}"
            - name: READINESS_PORT
              value: "31001"
          volumeMounts:
            - name: mysql-mgmt
              mountPath: /var/lib/mysql
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /bin/bash
              - -c
              - mysqladmin --host="${MYSQL_SERVER:-mysql-server}" ping  
            failureThreshold: {{ .Values.mysqlMgmt.livenessProbeFailureThreshold }}
            initialDelaySeconds: {{ .Values.mysqlMgmt.livenessProbeDelaySeconds }}
            periodSeconds: {{ .Values.mysqlMgmt.livenessProbePeriodSeconds }}
            timeoutSeconds: {{ .Values.mysqlMgmt.livenessProbeTimeoutSeconds }}
          readinessProbe:
            exec:
              command:
                - date
            failureThreshold: {{ .Values.mysqlMgmt.readinessProbeFailureThreshold }}
            initialDelaySeconds: {{ .Values.mysqlMgmt.readinessProbeDelaySeconds }}
            periodSeconds: {{ .Values.mysqlMgmt.readinessProbePeriodSeconds }}
            timeoutSeconds: {{ .Values.mysqlMgmt.readinessProbeTimeoutSeconds }}
      hostNetwork: false
      hostIPC: false
      hostPID: false
      restartPolicy: Always
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1

